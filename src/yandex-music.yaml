openapi: 3.0.1
info:
  title: Yandex Music Api
  description: "Swagger документация для Yandex Music API."
  version: 1.0.0
servers:
  - url: https://yandex-music-cors-proxy.onrender.com/https://api.music.yandex.net:443/
  - url: https://api.music.yandex.net:443/
  - url: http://api.music.yandex.net:443/
tags:
  - name: "user"
  - name: "tracks"
  - name: "albums"
  - name: "playlists"
  - name: "landing"
  - name: "artists"
  - name: "rotor"
  - name: "tags"

paths:
  /settings:
    description: Получение предложений по покупке. Нет обязательных параметров
    get:
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    $ref: "#/components/schemas/Settings"

  /permission-alerts:
    description: Получение оповещений. Нет обязательных параметров.
    get:
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    $ref: "#/components/schemas/PermissionAlerts"

  /account/experiments:
    description: Получение значений экспериментальных функций аккаунта
    get:
      tags:
        - account
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    $ref: "#/components/schemas/Experiments"

  /account/consume-promo-code:
    description: Активация промо-кода
    post:
      tags:
        - account
      security:
        - oAuth: []
        - oAuthProxied: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                code:
                  type: string
                language:
                  type: string
                  example: en
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    $ref: "#/components/schemas/PromoCodeStatus"

  /feed/wizard/is-passed:
    get:
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    properties:
                      isWizardPassed:
                        type: boolean
                        example: true

  /account/settings:
    description: Настройки текущего пользователя
    get:
      summary: Получение настроек текущего пользователя
      tags:
        - account
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    $ref: "#/components/schemas/UserSettings"
    post:
      summary: Изменение настроек текущего пользователя
      tags:
        - account
      security:
        - oAuth: []
        - oAuthProxied: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              description: Словарь параметров и значений
              type: object
              additionalProperties: true
              example:
                theme: "black"
                volumePercents: 80
                adsDisabled: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                description: Настройки пользователя или "None"
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    oneOf:
                      - $ref: "#/components/schemas/UserSettings"
                      - type: string
                        example: "None"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /account/status:
    description: Get account status for current user
    get:
      tags:
        - "account"
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    $ref: "#/components/schemas/Status"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
  /feed:
    get:
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content: {}

  /tags/{tagId}/playlist-ids:
    summary: Получение тега (подборки)
    parameters:
      - in: path
        name: tagId
        schema:
          type: string
        required: true
        example: "рок"
    get:
      tags:
        - "tags"
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    $ref: "#/components/schemas/TagResult"

  /albums/{albumId}/:
    parameters:
      - in: path
        name: albumId
        schema:
          type: number
        required: true
        example: 7019818
    get:
      tags:
        - "albums"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    $ref: "#/components/schemas/Album"

  /albums/{albumId}/with-tracks:
    parameters:
      - in: path
        name: albumId
        schema:
          type: number
        required: true
        example: 7019818
    get:
      tags:
        - "albums"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    $ref: "#/components/schemas/Album"

  /albums:
    post:
      tags:
        - "albums"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                "album-ids":
                  type: array
                  items:
                    type: string
                  example: [13984185, 13730064, 13963354, 13546288, 13937809]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Album"

  /landing3:
    parameters:
      - in: query
        name: blocks
        schema:
          type: string
          description: Одно или несколько значений блоков, разделенных запятой "promotions","new-releases","new-playlists","mixes","chart","playlists","play_contexts","podcasts"
        examples:
          single:
            value: "new-releases"
          multiple:
            value: "new-playlists,new-playlists"
    get:
      tags:
        - "landing"
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    $ref: "#/components/schemas/LandingResult"
          headers:
            "X-Yandex-Music-Device":
              schema:
                type: string
                description: Данные заголовок использует Windows приложение Yandex.Music, если пользователь не авторизован
                example: "os=unknown; os_version=unknown; manufacturer=unknown; model=unknown; clid=; device_id=unknown; uuid=unknown"

  /landing3/{landingBlock}:
    parameters:
      - in: path
        name: landingBlock
        required: true
        schema:
          type: string
          enum:
            [
              "new-playlists",
              "new-releases",
              "new-playlists",
              "chart",
              "podcasts",
            ]

  /landing3/chart/{chartType}:
    parameters:
      - in: path
        name: chartType
        required: true
        schema:
          type: string
          enum: ["russia", "world"]
    get:
      tags:
        - "landing"
      responses:
        200:
          description: Ok
          content: {}

  /genres:
    get:
      responses:
        200:
          description: Ok
          content: {}

  /playlists/list:
    description: Получение полной информации о плейлистах по их идентификатору
    parameters:
      - in: query
        name: playlistIds
        description: uid владельца плейлиста и kind плейлиста через двоеточие и запятую
        schema:
          type: string
          example: 103372440:1878,460140864:1000
    post:
      tags:
        - "playlists"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                playListIds:
                  type: array
                  items:
                    type: string
                  example: ["103372440:1878", "460140864:1000"]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Playlist"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /search:
    parameters:
      - in: query
        name: text
        description: Текст запроса
        schema:
          type: string
          example: Король и Шут
      - in: query
        name: page
        description: Номер страницы выдачи
        schema:
          type: number
          example: 0
      - in: query
        name: type
        schema:
          $ref: "#/components/schemas/SearchType"
      - in: query
        name: nococrrect
        schema:
          type: boolean
          default: false
    get:
      summary: Осуществление поиска по запросу и типу, получение результатов
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Playlist"

  /users/{userId}/playlists/list:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    get:
      summary: Получение списка плейлистов пользователя.
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Playlist"
        405:
          description: "Method Not Allowed"
          content: {}

  /users/{userId}/dislikes/tracks:
    description: Получение треков с отметкой "Не рекомендовать"
    summary: Получение треков с отметкой "Не рекомендовать"
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: query
        required: false
        name: if_modified_since_revision
        description: TODO
        schema:
          type: number
    get:
      tags:
        - "user"
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    $ref: "#/components/schemas/TracksList"
  /search/suggest:
    parameters:
      - in: query
        required: true
        name: part
        description: Часть поискового запроса
        schema:
          type: string
          example: Король
    get:
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    $ref: "#/components/schemas/Suggestions"

  /users/{userId}/playlists/{kind}:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    get:
      summary: Получение плейлиста по уникальному идентификатору
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"

  /users/{userId}/playlists:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: query
        required: true
        name: kinds
        schema:
          type: string
          example: "1000,1003"
      - in: query
        required: true
        name: mixed
        schema:
          type: boolean
          example: false
      - in: query
        required: true
        name: rich-tracks
        schema:
          type: boolean
          example: false
    get:
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content: {}

  /users/{userId}/playlists/create:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    post:
      tags:
        - "user"
        - "playlists"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
              example: '{"title" : "Название плейлиста", "visibility": "public"}'
      responses:
        200:
          description: Ok
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        401:
          description: Unauthorized

  /users/{userId}/playlists/{kind}/name:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    post:
      summary: Изменение названия плейлиста.
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
        - oAuthProxied: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                value:
                  type: string
                  example: new-name
      responses:
        200:
          description: Изменение видимости плейлиста
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    $ref: "#/components/schemas/Playlist"

  /users/{userId}/playlists/{kind}/delete:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    delete:
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content: {}

  # TODO: Complete
  /users/{userId}/playlists/{kind}/change-relative:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    post:
      tags:
        - "user"
        - "playlists"
      responses:
        200:
          description: Ok
          content: {}

  /users/{userId}/playlists/{kind}/recommendations:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    get:
      description: Получение рекомендаций для плейлиста
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    $ref: "#/components/schemas/PlaylistRecommendations"

  /users/{userId}/playlists/{kind}/visibility:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    post:
      summary: Изменение видимости плейлиста
      description: Необходимо передать "public" или "private" в качестве значения
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
        - oAuthProxied: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                value:
                  type: string
                  enum:
                    - "public"
                    - "private"
      responses:
        200:
          description: Изменение видимости плейлиста
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    $ref: "#/components/schemas/Playlist"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /users/{userId}/likes/tracks/add-multiple:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    post:
      summary: Пометить треки как "Мне нравится"
      tags:
        - "user"
        - "tracks"
      security:
        - oAuth: []
        - oAuthProxied: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                "track-ids":
                  type: array
                  items:
                    type: string
                  example: [7019818, 29238706, 83063895]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    properties:
                      revision:
                        type: number
        401:
          description: Unauthorized
          content: {}

  /users/{userId}/likes/tracks/remove:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    post:
      tags:
        - "user"
        - "tracks"
      security:
        - oAuth: []
        - oAuthProxied: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
            example: '{"track-ids" : "7019818,29238706"}'
      responses:
        200:
          description: Ok
          content: {}
        401:
          description: Unauthorized
          content: {}

  /users/{userId}/likes/tracks:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    get:
      summary: Получение треков с отметкой "Мне нравится"
      tags:
        - "user"
        - "tracks"
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    properties:
                      library:
                        $ref: "#/components/schemas/TracksList"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    properties:
                      name:
                        type: string
                      message:
                        type: string

  /tracks/:
    post:
      summary: Получение треков
      tags:
        - "tracks"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                "track-ids":
                  description: Уникальные идентификаторы треков
                  type: array
                  items:
                    type: string
                  example: [7019818, 29238706]
                "with-positions":
                  description: С позициями
                  type: boolean
                  example: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Track"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /tracks/{trackId}/download-info:
    parameters:
      - in: path
        required: true
        name: trackId
        schema:
          type: string
          example: "78550148"
    get:
      summary: Получение информации о доступных вариантах загрузки трека.
      tags:
        - "tracks"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    $ref: "#/components/schemas/DownloadInfo"

  /tracks/{trackId}/supplement:
    parameters:
      - in: path
        required: true
        name: trackId
        schema:
          type: string
          example: 32326555
    get:
      description: Получение дополнительной информации о треке (Текст песни, видео, и т.д.).
      summary: Получение дополнительной информации о треке (Текст песни, видео, и т.д.).
      tags:
        - "tracks"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    $ref: "#/components/schemas/Supplement"

  /tracks/{trackId}/similar:
    parameters:
      - in: path
        required: true
        name: trackId
        schema:
          type: string
          example: 32326555
    get:
      summary: Получение похожих треков
      description: Получение похожих треков
      tags:
        - tracks
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: object
                    $ref: "#/components/schemas/SimilarTracks"

  /play-audio:
    description: Метод для отправки текущего состояния прослушиваемого трека
    post:
      tags:
        - tracks
      security:
        - oAuth: []
        - oAuthProxied: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - from
              type: object
              properties:
                track-id:
                  description: Уникальный идентификатор трека
                  oneOf:
                    - type: string
                    - type: number
                from-cache:
                  type: boolean
                  description: Проигрывается ли трек с кеша
                from:
                  type: string
                  description: Наименования клиента с которого происходит прослушивание
                play-id:
                  type: string
                  description: Уникальный идентификатор проигрывания
                uid:
                  type: number
                  description: Уникальный идентификатор пользователя
                timestamp:
                  type: string
                  description: Текущая дата и время в ISO
                  example: "2021-03-17T18:13:40.000+00:00"
                track-length-seconds:
                  type: number
                  description: Продолжительность трека в секундах
                total-played-seconds:
                  type: number
                  description: Продолжительность трека в секундах
                end-position-seconds:
                  type: number
                  description: Продолжительность трека в секундах
                album-id:
                  description: Уникальный идентификатор альбома
                  oneOf:
                    - type: string
                    - type: number
                playlist-id:
                  type: string
                  description: Уникальный идентификатор проигрывания
                client-now:
                  type: string
                  description: Текущая дата и время клиента в ISO
                  example: "2021-03-17T18:13:40.000+00:00"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                description: Возвращает строку "ok" при успешном выполнении запроса
                type: object
                properties:
                  invocationInfo:
                    $ref: "#/components/schemas/InvocationInfo"
                  result:
                    type: string
                    example: ok
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /artists/{artistId}/track-ids-by-rating:
    parameters:
      - in: path
        required: true
        name: artistId
        schema:
          type: string
          example: 218099
    get:
      summary: Получение популярных треков для артиста
      tags:
        - "artists"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  artist:
                    $ref: "#/components/schemas/Artist"
                  tracks:
                    type: array
                    items:
                      type: string

  /artists/{artistId}/brief-info:
    parameters:
      - in: path
        required: true
        name: artistId
        schema:
          type: string
          example: 218099
    get:
      tags:
        - "artists"
      responses:
        200:
          description: Ok
          content: {}

  /artists/{artistId}/tracks:
    parameters:
      - in: path
        required: true
        name: artistId
        schema:
          type: string
          example: 218099
      - in: query
        required: false
        name: page
        schema:
          type: number
          example: 0
      - in: query
        required: false
        name: page-size
        schema:
          type: number
          example: 20
    get:
      tags:
        - "artists"
      responses:
        200:
          description: Ok
          content: {}

  /artists/{artistId}/direct-albums:
    parameters:
      - in: path
        required: true
        name: artistId
        schema:
          type: string
          example: 218099
      - in: query
        required: false
        name: page
        schema:
          type: number
          example: 0
      - in: query
        required: false
        name: page-size
        schema:
          type: number
          example: 20
      - in: query
        required: false
        name: sort-by
        schema:
          type: string
          enum:
            - "year"
            - "rating"
    get:
      tags:
        - "artists"
      responses:
        200:
          description: Ok
          content: {}

  /rotor/station/{rotorID}/tracks:
    parameters:
      - in: path
        required: false
        name: rotorID
        description: "ID радиостанции, для примера: user:onyourwave это моя волна"
        schema:
          type: string
          example: user:onyourwave
      - in: query
        required: false
        name: settings2
        description: "Использовать ли второй набор настроек. Все официальные клиенты выполняют запросы с `settings2 = True`."
        schema:
          type: boolean
          example: true
      - in: query
        required: false
        name: queue
        description: "Уникальной идентификатор трека, который только что был."
        schemas:
          type: string
    get:
      summary: "Получение цепочки треков определённой станции"
      tags:
        - "rotor"
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content: {}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /rotor/account/status:
    get:
      summary: "Получение статуса пользователя с дополнителными полями"
      tags:
        - "rotor"
        - "account"
      security:
        - oAuth: []
        - oAuthProxied: []
      responses:
        200:
          description: Ok
          content: {}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /rotor/stations/list:
    parameters:
      - in: query
        required: false
        name: language
        description: "Язык, на котором будет информация о станциях"
        schema:
          type: string
          example: ru
    get:
      summary: "Получение всех радиостанций с настройками пользователя"
      tags:
        - "rotor"
      responses:
        200:
          description: Ok
          content: {}

  /rotor/stations/dashboard:
    get:
      summary: "Получение рекомендованных станций текущего пользователя"
      security:
        - oAuth: []
        - oAuthProxied: []
      tags:
        - "rotor"
      responses:
        200:
          description: Ok
          content: {}

  /rotor/station/{station}/feedback:
    parameters:
      - in: path
        required: true
        name: station
        description: Станция
        schema:
          type: string
    post:
      summary: "Отправка ответной реакции на происходящее при прослушивании радио. Сообщения о начале прослушивания радио, начале и конце трека, его пропуска."
      tags:
        - "rotor"
      requestBody:
        required: true
        content:
          # TODO: complete parameters
          application/x-www-form-urlencoded:
            schema:
              type: string
              example: ""
      responses:
        200:
          description: Ok
          content: {}

components:
  securitySchemes:
    oAuthProxied:
      type: oauth2
      description: Authentication via proxy server to bypass cors
      flows:
        password:
          tokenUrl: https://yandex-music-cors-proxy.onrender.com/https://oauth.yandex.ru/token
          scopes: {}
    oAuth:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        password:
          tokenUrl: https://oauth.yandex.ru/token
          scopes: {}
  schemas:
    UserSettings:
      type: object
      properties:
        uid:
          type: number
        lastFmScrobblingEnabled:
          type: boolean
          example: false
        facebookScrobblingEnabled:
          type: boolean
          example: false
        shuffleEnabled:
          type: boolean
          example: false
        addNewTrackOnPlaylistTop:
          type: boolean
          example: false
        volumePercents:
          type: boolean
          example: 75
        userMusicVisibility:
          $ref: "#/components/schemas/VisibilityEnum"
        userSocialVisibility:
          $ref: "#/components/schemas/VisibilityEnum"
        adsDisabled:
          type: boolean
          example: true
        modified:
          type: string
          example: "2019-04-14T14:55:50+00:00"
        rbtDisabled:
          type: string
        theme:
          type: string
          enum:
            - "black"
            - "default"
          description: Тема оформления.
          example: "black"
        promosDisabled:
          type: boolean
          example: true
        autoPlayRadio:
          type: boolean
          example: true
        syncQueueEnabled:
          type: boolean
          example: false
    VisibilityEnum:
      type: string
      enum:
        - "private"
        - "public"
      example: "public"
    InvocationInfo:
      type: object
      properties:
        "exec-duration-millis":
          type: number
        hostname:
          type: string
        "req-id":
          type: number
    Error:
      type: object
      properties:
        name:
          type: string
          example: "validate"
        message:
          type: string
          example: "Parameters requirements are not met"
    Account:
      type: object
      description: Основная информация об аккаунте
      properties:
        now:
          type: string
          description: Текущая дата и время
          example: "2021-03-17T18:13:40+00:00"
        uid:
          type: number
          description: Уникальный идентификатор
        login:
          type: string
          description: Виртуальное имя (обычно e-mail)
        region:
          type: number
          description: Регион
        fullName:
          type: string
          description: Полное имя (имя и фамилия)
        secondName:
          type: string
          description: Фамилия
        firstName:
          type: string
          description: Имя
        displayName:
          type: string
          description: Отображаемое имя
        serviceAvailable:
          type: boolean
          description: Доступен ли сервис
        hostedUser:
          type: boolean
          description: Является ли пользователем чьим-то другим
        "passport-phones":
          type: array
          description: Мобильные номера
          items:
            type: object
            properties:
              phone:
                type: string
    Album:
      type: object
      properties:
        id:
          type: number
          description: Идентификатор альбома
        error:
          description: Ошибка получения альбома
          type: string
          nullable: true
        title:
          description: Название альбома
          type: string
        "type":
          description: Тип альбома
          type: string
          enum: ["single", "podcast"]
        metaType:
          description: Мета тип
          type: string
          enum: ["single", "podcast", "music"]
        year:
          description: Год релиза
          type: number
        releaseDate:
          description: Дата релиза в формате ISO 8601
          type: string
        coverUri:
          description: Ссылка на обложку
          type: string
        ogImage:
          description: Ссылка на превью Open Graph
          type: string
        genre:
          description: Жанр музыки
          type: string
        buy:
          type: array
          items:
            type: object
        trackCount:
          description: Количество треков.
          type: number
        recent:
          description: Является ли альбом новым
          type: boolean
        veryImportant:
          description: Популярен ли альбом у слушателей
          type: boolean
        artists:
          description: Артисты
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Artist"
        labels:
          description: Лейблы
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              name:
                type: string
        available:
          description: Доступен ли альбом
          type: boolean
        availableForPremiumUsers:
          description: Доступен ли альбом для пользователей с подпиской
          type: boolean
        availableForMobile:
          description: Доступен ли альбом из приложения для телефона
          type: boolean
        availablePartially:
          description: Доступен ли альбом частично для пользователей без подписки
          type: boolean
        bests:
          description: ID лучших треков альбома
          type: array
          items:
            type: number
        prerolls:
          description: Прероллы
          type: array
          items:
            type: object
        volumes:
          description: Треки альбома, разделенные по дискам.
          type: array
          nullable: true
          items:
            type: array
            items:
              type: object
              $ref: "#/components/schemas/Track"
    Artist:
      type: object
      properties:
        composer:
          type: boolean
        cover:
          type: object
          nullable: true
          $ref: "#/components/schemas/Cover"
        decomposed:
          type: array
          nullable: true
          items:
            type: object
        genres:
          type: array
          items:
            type: object
        id:
          type: string
        name:
          type: string
        various:
          type: boolean
        popularTracks:
          type: array
          nullable: true
          items:
            type: object
            $ref: "#/components/schemas/Track"
        ticketsAvailable:
          description: Имеются ли в продаже билеты на концерт
          nullable: true
          type: boolean
        regions:
          type: array
          nullable: true
          items:
            type: string
    Cover:
      type: object
      properties:
        custom:
          type: boolean
          nullable: true
        dir:
          type: string
          nullable: true
        "type":
          nullable: true
          type: string
          enum: ["pic", "mosaic"]
        itemsUri:
          type: array
          nullable: true
          items:
            type: string
        uri:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
          description: If exists other properties is missing
    Owner:
      type: object
      properties:
        login:
          type: string
        name:
          type: string
        sex:
          type: string
        uid:
          type: number
        verified:
          type: boolean
    Track:
      type: object
      properties:
        albums:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Album"
        artists:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Artist"
        available:
          type: boolean
        availableForPremiumUsers:
          type: boolean
        availableFullWithoutPermission:
          type: boolean
        coverUri:
          description: Cover uri template
          type: string
        durationMs:
          type: number
        fileSize:
          type: number
        id:
          type: string
        lyricsAvailable:
          type: boolean
        major:
          type: object
          properties:
            id:
              type: number
            name:
              type: string
        normalization:
          type: object
          properties:
            gain:
              type: number
            peak:
              type: number
        ogImage:
          type: string
        previewDurationMs:
          type: number
        realId:
          type: string
        rememberPosition:
          type: boolean
        storageDir:
          type: string
        title:
          type: string
        type:
          type: string
    TrackItem:
      type: object
      properties:
        id:
          type: number
        playCount:
          type: number
        recent:
          type: boolean
        timestamp:
          type: string
        track:
          description: Null when tracks are not riched
          type: object
          $ref: "#/components/schemas/Track"
    Playlist:
      description: play list data
      type: object
      properties:
        playlistUuid:
          type: string
        description:
          type: string
        descriptionFormatted:
          type: string
        available:
          type: boolean
        collective:
          type: boolean
        cover:
          type: object
          $ref: "#/components/schemas/Cover"
        created:
          type: string
        modified:
          type: string
        backgroundColor:
          type: string
        textColor:
          type: string
        durationMs:
          type: number
        isBunner:
          type: boolean
        isPremiere:
          type: boolean
        kind:
          type: number
        ogImage:
          type: string
        owner:
          type: object
          $ref: "#/components/schemas/Owner"
        prerolls:
          type: array
          items:
            type: object
        revision:
          type: number
        snapshot:
          type: number
        tags:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              value:
                type: string
        title:
          type: string
        trackCount:
          type: number
        uid:
          type: number
        visibility:
          type: string
          enum: ["public", "private"]
        likesCount:
          type: number
        tracks:
          type: array
          nullable: true
          items:
            type: object
            $ref: "#/components/schemas/TrackItem"
    Status:
      type: object
      properties:
        account:
          type: object
          $ref: "#/components/schemas/Account"
        permissions:
          type: object
          $ref: "#/components/schemas/Permissions"
        subscription:
          type: object
          $ref: "#/components/schemas/Subscription"
        subeditor:
          type: boolean
          description: Наличие статуса модератора проверки корректности информации
        subeditorLevel:
          type: number
          description: Уровень статуса модератора
        pretrialActive:
          type: boolean
        plus:
          type: object
          description: Информация о Plus подписке
          properties:
            hasPlus:
              type: boolean
            isTutorialCompleted:
              type: boolean
        defaultEmail:
          type: string
          description: Основной e-mail адрес аккаунта
          example: "email@example.com"
        barBelow:
          type: object
          description: Блок с предупреждениями о конце подписки и подарках
          $ref: "#/components/schemas/Alert"
    Permissions:
      type: object
      description: Информация о правах пользователя, их изначальных значениях и даты окончания
      properties:
        until:
          type: string
          example: "2021-03-24T18:13:40+00:00"
        values:
          type: array
          items:
            enum:
              [
                "landing-play",
                "feed-play",
                "radio-play",
                "mix-play",
                "radio-skips",
                "play-radio-full-tracks",
              ]
        default:
          type: array
          items:
            enum:
              [
                "landing-play",
                "feed-play",
                "radio-play",
                "mix-play",
                "radio-skips",
                "play-radio-full-tracks",
              ]
    Subscription:
      type: object
      description: Информация о подписках пользователя
      properties:
        hadAnySubscription:
          type: boolean
        canStartTrial:
          type: boolean
        mcdonalds:
          type: boolean
    Alert:
      type: object
      description: Блок с предупреждениями о конце подписки и подарках
      properties:
        alertId:
          type: string
          description: Уникальный идентификатор
        text:
          type: string
          description: Текст предупреждения
        bgColor:
          type: string
          description: Цвет заднего фона (HTML)
        textColor:
          type: string
          description: Цвет текста (HTML)
        alertType:
          type: string
          description: Тип предупреждения
          example: "Promo_rk360"
        button:
          type: object
          $ref: "#/components/schemas/AlertButton"
        closeButton:
          type: boolean
          description: Наличие кнопки "Закрыть"
    AlertButton:
      type: object
      description: кнопка со ссылкой
      properties:
        text:
          type: string
          description: Текст на кнопке
        bgColor:
          type: string
          description: Цвет заднего фона (HTML)
        textColor:
          type: string
          description: Цвет текста (HTML)
        uri:
          type: string
          description: Ссылка, куда ведет кнопка
    Suggestions:
      type: object
      description: подсказки при поиске
      properties:
        best:
          type: object
        suggestions:
          type: array
          items:
            type: string
    Best:
      type: object
      description: лучший результат поиска
      properties:
        type:
          type: string
          description: Тип лучшего результата
        text:
          type: string
        result:
          oneOf:
            - $ref: "#/components/schemas/Track"
            - $ref: "#/components/schemas/Artist"
            - $ref: "#/components/schemas/Album"
            - $ref: "#/components/schemas/Playlist"
            - $ref: "#/components/schemas/Video"
    PlaylistRecommendations:
      type: object
      description: рекомендации для плейлиста
      properties:
        batch_id:
          type: string
          description: Уникальный идентификатор партии треков
        tracks:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Track"
    Settings:
      type: object
      description: Предложения по покупке
      properties:
        inAppProducts:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Product"
        nativeProducts:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Product"
        webPaymentUrl:
          type: string
        webPaymentMonthProductPrice:
          type: object
          $ref: "#/components/schemas/Price"
        promoCodesEnabled:
          type: boolean
    Price:
      type: object
      description: цена
      properties:
        amount:
          description: Количество единиц
          type: number
        currency:
          description: Валюта
          type: string
    Product:
      type: object
      description: продаваемый продукт
      properties:
        productId:
          description: Уникальный идентификатор.
          type: string
        type:
          description: Тип продаваемого.
          type: string
        commonPeriodDuration:
          description: Длительность общего периода.
          type: string
        duration:
          description: Длительность.
          type: number
        trialDuration:
          description: Длительность испытательного срока.
          type: number
        price:
          description: Цена.
          type: object
          $ref: "#/components/schemas/Price"
        feature:
          description: Предоставляемая возможность.
          type: string
        debug:
          description: Отладочный продукт.
          type: boolean
        plus:
          description: Даёт ли подписку "Плюс".
          type: boolean
        cheapest:
          description: Самый дешёвый (лучшее предложение).
          type: boolean
        title:
          description: Заголовок продукта.
          type: string
        familySub:
          description: Семейная ли подписка.
          type: boolean
        fbImage:
          description: Картинка для превью на facebook.
          type: string
        fbName:
          description: Заголовок превью на facebook.
          type: string
        family:
          description: Доступно ли для семьи.
          type: boolean
        features:
          description: Список предоставляемых возможностей.
          type: array
          items:
            type: string
        description:
          description: Описание.
          type: string
        available:
          description: Доступна ли покупка.
          type: boolean
        trialAvailable:
          description: Доступен ли пробный период.
          type: boolean
        trialPeriodDuration:
          description: Длительность пробного периода.
          type: string
        introPeriodDuration:
          description: Длительность вступительного периода TODO.
          type: string
        introPrice:
          description: Цена вступительного периода.
          type: object
          $ref: "#/components/schemas/Price"
        startPeriodDuration:
          description: Длительность первого срока (за меньшую цену).
          type: string
        startPrice:
          description: Цена за первый срок.
          type: object
          $ref: "#/components/schemas/Price"
        licenceTextParts:
          description: Длительность пробного периода.
          type: object
          $ref: "#/components/schemas/LicenceTextPart"
        vendorTrialAvailable:
          description: Доступен испытательный срок продавца TODO.
          type: boolean
        buttonText:
          description: Текст кнопки.
          type: string
        buttonAdditionalText:
          description: Дополнительный текст кнопки.
          type: string
        paymentMethodTypes:
          description: Способы оплаты.
          type: array
          items:
            type: string
    LicenceTextPart:
      type: object
      description: часть текста с ссылкой на лицензионное соглашение
      properties:
        text:
          description: Часть текста.
          type: string
        url:
          description: Ссылка на лицензионное соглашение.
          type: string
    PermissionAlerts:
      type: object
      description: оповещения
      properties:
        alerts:
          type: array
          items:
            type: string
    Experiments:
      type: object
      description: режимы экспериментальных функций
    PromoCodeStatus:
      type: object
      description: статус активации промо-кода
      properties:
        status:
          type: string
          description: Статус операции
          example: code-not-exists
        statusDesc:
          type: string
          description: Описание статуса
          example: Gift code does not exist
        accountStatus:
          type: object
          description: Информация об аккаунте пользователя.
          $ref: "#/components/schemas/Status"
    Supplement:
      type: object
      description: дополнительная информация о треке
      properties:
        id:
          type: number
          description: Уникальный идентификатор дополнительной информации.
        lyrics:
          type: object
          description: Текст песни.
          $ref: "#/components/schemas/Lyrics"
        videos:
          type: object
          description: Видео.
          $ref: "#/components/schemas/VideoSupplement"
        radioIsAvailable:
          type: boolean
          description: Доступно ли радио.
        description:
          type: string
          description: Полное описание эпизода подкаста.
    Lyrics:
      type: object
      description: текст трека
      properties:
        id:
          type: number
          description: Уникальный идентификатор текста трека.
        lyrics:
          type: string
          description: Первые строки текст песни.
        hasRights:
          type: boolean
          description: Есть ли права.
        fullLyrics:
          type: string
          description: Текст песни.
        textLanguage:
          type: string
          description: Язык текста.
        showTranslation:
          type: boolean
          description: Доступен ли перевод.
        url:
          type: string
          description: Ссылка на источник перевода. Обычно genius.com.
    VideoSupplement:
      type: object
      description: видеоклипы
      properties:
        cover:
          type: string
          description: URL на обложку видео.
        provider:
          type: string
          description: Сервис поставляющий видео.
        title:
          type: string
          description: Название видео.
        providerVideoId:
          type: string
          description: Уникальный идентификатор видео на сервисе.
        url:
          type: string
          description: URL на видео.
        embedUrl:
          type: string
          description: URL на видео, находящегося на серверах Яндекса.
        embed:
          type: string
          description: HTML тег для встраивания видео.
    Video:
      type: object
      description: Видео
      properties:
        title:
          type: string
          description: Название видео
        cover:
          type: string
          description: Ссылка на изображение
        embedUrl:
          type: string
          description: Ссылка на видео
        provider:
          type: string
          description: Сервис поставляющий видео
        providerVideoId:
          type: string
          description: Уникальный идентификатор видео на сервисе.
        youtubeUrl:
          type: string
          description: Ссылка на видео Youtube
        thumbnailUrl:
          type: string
          description: Ссылка на изображение
        duration:
          type: number
          description: Длительность видео в секундах
        text:
          type: string
          description: Текст
        htmlAutoPlayVideoPlayer:
          type: string
          description: HTML тег для встраивания в разметку страницы
        regions:
          type: array
          items:
            type: string
          example: ["RUSSIA_PREMIUM", "RUSSIA"]
    TagResult:
      type: object
      description: Класс, представляющий тег и его плейлисты
      properties:
        tag:
          $ref: "#/components/schemas/Tag"
        ids:
          type: array
          items:
            $ref: "#/components/schemas/PlaylistId"
    Tag:
      type: object
      description: Тег
      required:
        - id
        - value
        - name
        - ogDescription
      properties:
        id:
          type: string
          description: Уникальный идентификатор тега
        value:
          type: string
          description: Значение тега (название в lower case)
        name:
          type: string
          description: Название тега (отображаемое)
        ogDescription:
          type: string
          description: Описание тега для OpenGraph
        ogImage:
          type: string
          description: Ссылка на изображение для OpenGraph
    PlaylistId:
      type: object
      properties:
        uid:
          type: integer
          description: Уникальный идентификатор пользователя владеющим плейлистом
        kind:
          type: integer
          description: Уникальный идентификатор плейлиста
    SimilarTracks:
      type: object
      description: список похожих треков на другой трек
      properties:
        track:
          type: object
          description: трек
          $ref: "#/components/schemas/Track"
        similarTracks:
          type: array
          description: Похожие треки
          items:
            $ref: "#/components/schemas/Track"
    TracksList:
      type: object
      description: список треков
      properties:
        uid:
          type: number
          description: Уникальный идентификатор пользователя
        revisions:
          type: number
          description: Актуальность данных TODO
        tracks:
          type: array
          description: Список треков в укороченной версии
          items:
            $ref: "#/components/schemas/TrackShort"
    TrackShort:
      type: object
      description: Укороченная версия трека с неполными данными
      properties:
        id:
          type: string
          description: Уникальный идентификатор трека
        albumId:
          type: string
          description: Уникальный идентификатор альбома
        timestamp:
          type: string
          description: Дата
    DownloadInfo:
      type: object
      description: информация о вариантах загрузки трека
      properties:
        codec:
          type: string
          description: Кодек аудиофайла
        gain:
          type: boolean
          description: Усиление
        preview:
          type: string
          description: Предварительный просмотр
        downloadInfoUrl:
          type: string
          description: Ссылка на XML документ содержащий данные для загрузки трека
        direct:
          type: boolean
          description: Прямая ли ссылка
        bitrateInKbps:
          type: number
          description: Битрейт аудиофайла в кбит/с
    Search:
      type: object
      description: Результаты поиска
      properties:
        searchResultId:
          type: string
          description: ID запроса
        text:
          type: string
          description: Текст запроса
        best:
          $ref: "#/components/schemas/Best"
        albums:
          $ref: "#/components/schemas/SearchResult"
          description: Найденные альбомы
        artists:
          $ref: "#/components/schemas/SearchResult"
          description: Найденные артисты
        playlists:
          $ref: "#/components/schemas/SearchResult"
          description: Найденные альбомы
        tracks:
          $ref: "#/components/schemas/SearchResult"
          description: Найденные треки
        videos:
          $ref: "#/components/schemas/SearchResult"
          description: Найденные видео
        users:
          $ref: "#/components/schemas/SearchResult"
          description: Найденные пользователи
        podcasts:
          $ref: "#/components/schemas/SearchResult"
          description: Найденные подкасты
        podcast_episodes:
          $ref: "#/components/schemas/SearchResult"
          description: Найденные выпуски подкастов
        type:
          $ref: "#/components/schemas/SearchType"
          description: Тип результата по которому искали
        page:
          type: number
          description: Текущая страница
        perPage:
          type: number
          description: Результатов на странице
        misspellCorrected:
          type: boolean
          description: Был ли исправлен запрос
        misspellOriginal:
          type: string
          description: Оригинальный запрос
        nocorrect:
          type: boolean
          description: Было ли отключено исправление результата
    SearchType:
      type: string
      enum: ["artist", "album", "track", "podcast", "all"]
      default: "all"
    SearchResult:
      type: object
      properties:
        type:
          type: string
          description: Тип результата
        total:
          type: number
          description: Количество результатов
        perPage:
          type: number
          description: Максимальное количество результатов на странице.
        order:
          type: number
          description: Позиция блока
        results:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Track"
              - $ref: "#/components/schemas/Artist"
              - $ref: "#/components/schemas/Album"
              - $ref: "#/components/schemas/Playlist"
              - $ref: "#/components/schemas/Video"
    BadRequest:
      type: object
      properties:
        invocationInfo:
          $ref: "#/components/schemas/InvocationInfo"
        error:
          $ref: "#/components/schemas/Error"
    LandingResult:
      type: object
      properties:
        pumpkin:
          type: boolean
        contentId:
          type: string
        blocks:
          type: array
          items:
            $ref: "#/components/schemas/LandingBlock"
    LandingBlock:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        type:
          description: the follwing values are allowed or combination of these values separated by comman - personal-playlists, podcasts, play-context, chart, new-playlists, new-releases, promotions
          type: string
        typeForFrom: 
          $ref: "#/components/schemas/LandingBlockType"
        description:
          type: string
        entities:
          type: array
          items:
            # TODO: need to complete
            type: object
    LandingBlockType:
      type: string
      enum:
        - "personalplaylists"
        - "promotions"
        - "new-releases"
        - "new-playlists"
        - "mixes"
        - "chart"
        - "artists"
        - "albums"
        - "playlists"
        - "play_contexts"
        - "podcasts"
